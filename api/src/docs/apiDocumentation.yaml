# https://editor.swagger.io/
openapi: 3.0.0
info:
  title: Matches GeekHunter API
  description: Backend using NodeJS, MongoDB and Docker.
  version: 0.1.9
servers:
  - url: http://localhost:3333/
    description: Local server.
  - url: http://api.matchesgeekhunter.com
    description: Production server.
paths:
  /:
    get:
      summary: Returns a 200 status.
      description: Displayed a message.
      responses:
        '200':
          description: 'Fullstack Challenge GeekHunter.'
        '500':
          description: 'error'
  /candidates:
    get:
      summary: Returns a list of candidates.
      description: Data saved on MongoDB by the scrapper will be displayed on this endpoint.
      responses:
        '200':
          description: A JSON array of candidates
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /candidate/{id}:
    get:
      summary: Returns a single candidate.
      description: Here we going to get just one product by the id params.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: array
            items:
              type: object
      responses:
        '200':
          description: A single candidate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/candidate'
  /jobs:
    get:
      summary: Returns a list of jobs.
      description: Data saved on MongoDB by the scrapper will be displayed on this endpoint.
      responses:
        '200':
          description: A JSON array of jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /job/{id}:
    get:
      summary: Returns a single job.
      description: Here we going to get just one product by the id params.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: array
            items:
              type: object
      responses:
        '200':
          description: A single job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job'
components:
  schemas:
    candidate:
      properties:
        id:
          type: number
        city:
          type: string
        experience:
          type: string
        technologies:
          type: array
      required:
        - id
        - city
        - experience
        - technologies
    job:
      properties:
        id:
          type: number
        city:
          type: string
        technologies:
          type: array
      required:
        - id
        - city
        - technologies